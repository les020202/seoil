<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.6.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

<!-- url확인, 로그인, 로그아웃(http) 
/ 회원에 대한 로그인 정보(authentication-manager) 
intercept-url을 자바파일에서 처리가능
회원에 대한 로그인 정보를 데이터베이스로 사용하기위해 자바를 이용
-->


    <security:http auto-config="true" use-expressions="true">
         <!-- 인증된 사용자만 페이지를 볼 수 있으며 그 외 사용자는 로그인 페이지로 이동 --> 
        <security:intercept-url pattern="/*" access="isAuthenticated()"/>
        
         
        <!-- bean생성 후에 로그인페이지 이동하게 설정 -->
        <security:form-login 
        login-page="/login/login"  
        default-target-url="/bookList/bookList" 
        authentication-failure-url="/login/login?error=true"
        username-parameter="username"
        password-parameter="password"
        authentication-success-handler-ref="loginSuccess" 
        />
        <!-- 로그인 성공시 이동할 객체 클래스지정 : authentication-success-handler-ref -->
  		<!-- 접근권한이 없는 계정이 접근했을 때 클래스로 접근불가처리 -->
  		<security:access-denied-handler ref="accessDenied"/>  		
                
        <security:logout logout-url="/logout" 
        logout-success-url="/login/login?logout=true" />
        
        <!-- url page가 없는 경우 오류가 발생하는데 무조건 로그인페이지 이동 -->
       <security:http-basic entry-point-ref="authenticationEntryPoint" />
    </security:http>
   	
   	<!--성공과 접근권한 실패시 사용자 bean객체 생성  -->
   	<bean id="loginSuccess" class="login.CustomerLoginSuccessHandler"/>
   	<bean id="accessDenied" class="login.CustomerAccessDeniedHandler"/>
   
   <!-- provoider user-service-ref사용한다는 의미는 자바파일을 사용한다는 의미
   이는 mvc모델을 사용하겠다는 의미
   loginService는 login/LoginService는 객체를 사용자 만들지만
   security에서 구현할 객체(UserDetailsService)를 받아서 처리 -->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="loginService">
       <security:password-encoder ref="bpe"/>
        </security:authentication-provider>
    </security:authentication-manager>
    
<bean id="bpe" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

<bean id="authenticationEntryPoint" 
class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <constructor-arg name="loginFormUrl" value="/login/login"/>
</bean>
</beans>